import Vue from 'vue';
import VueI18n from 'vue-i18n';

Vue.use(VueI18n);

export const i18n = new VueI18n({
  locale: 'de',
  fallbackLocale: 'de',
  messages: {
    de: {
      numVarInput: 'Anzahl an Variablen',
      confirm: 'Bestätigen',
      varNaming: 'Benennung der Variablen',
      kvDiagram: 'KV-Diagramm',
      numeralSystem: 'Zahlensysteme',
      polyadic: 'Polyadisch',
      floatingPoint: 'Gleitkommazahlen',
      functionMin: 'Funktionsminimierung',
      exercises: 'Übungsaufgaben',
      generateEx: 'Aufgabe Generieren',
      generate: 'Generieren',
      addition: 'Addition',
      subtraction: 'Subtraktion',
      multiplication: 'Multiplikation',
      division: 'Division',
      ownSolution: 'Eigene Lösung',
      signBit: 'Vorzeichenbit',
      correctSolution: 'Korrekte Lösung',
      solution: 'Lösung',
      exponentBits: 'Exponent',
      fractionBits: 'Mantisse',
      attRound: 'Runden nicht vergessen!',
      attSolve: 'Bitte vorher selber versuchen, die Aufgabe zu lösen!',
      step: 'Schritt',
      freeCalculation: 'Freie Berechnung',
      operationSelect: 'Operationsauswahl',
      firstFloatingPoint: 'Erste Gleitkommazahl',
      secondFloatingPoint: 'Zweite Gleitkommazahl',
      operand: 'Operand',
      decimal: 'Dezimalzahl',
      binary: 'Binärzahl',
      inputNumber: 'Zahl eingeben',
      fpformat: 'Floating Point Format',
      check: 'Check',
      values: 'Werte',
      // neu
      // general
      steps: 'Schritte',
      repeatMinuend: 'wiederhole\\ Minuend',
      doDivision: 'Divison durchführen',
      // values
      value: 'Wert',
      givenValues: 'Werte der übertragenen Zahlen',
      leftValue: 'Zahl links',
      rightValue: 'Zahl rechts',
      firstSummand: '1. Summand',
      secondSummand: '2. Summand',
      minuend: 'Minuend',
      subrahend: 'Subtrahend',
      sign: 'Vorzeichen',
      // exponent
      exponent: 'Exponent',
      adjunstExponents: 'Die Exponenten beider Zahlen müssen angeglichen werden.',
      addExponents: 'Die Exponenten beider Zahlen müssen addiert werden.',
      subtExponents: 'Die Exponenten beider Zahlen müssen subtrahiert werden.',
      diffExponent: 'Differenz Exponent',
      smallerExponent: 'Es wird immer der kleinere vom größeren Exponenten subtrahiert',
      resDiffExponent: 'daher ergibt sich eine Differenz von',
      newExponent: 'neuer Exponent',
      considerExponent: 'Exponent beachten',
      // mantissa
      mantissa: 'Mantisse',
      mulMantissa: 'Die Mantissen beider Zahlen müssen multipliziert werden.',
      addMantissa: 'Die Mantissen beider Zahlen müssen addiert werden.',
      divMantissa: 'Die Mantissen beider Zahlen müssen dividiert werden.',
      newMantissa: 'Neue Mantisse',
      zeroMantissa: 'Mantissen sind identisch, neue Mantissa ist 0-Mantisse',
      newMantissaIs: 'Die neue Mantisse ist somit',
      equalMantissa: 'Die Mantissen sind identisch, \\( \\rightarrow \\) Exponent wird um 1 erhöht Mantisse bleibt gleich',
      equalMantissaDiv: 'Die beiden Mantissen sind gleich, daher wird keine binäre Division durchgeführt',
      adjustSmallerMantissa: 'Anpassen der kleineren Mantisse',
      shiftMantissa: 'Shiften der kleineren Mantisse',
      mantissaFloat: 'Mantisse im Float',
      mantissa1float: 'Im Float wird die führende 1 nicht angezeigt',
      // twos complement
      subtTwosComplement: 'Subtraktion entspricht der Addition mit dem Zweierkomplement',
      mantissaTwosComplement: 'Bildung Zweierkomplement aus Mantisse',
      switchBits: 'Bits umkehren',
      add1: '1 addieren',
      normalize: 'Normalisieren',
      // shift, representation
      shiftExpMant: 'Der Shift-Faktor des Exponenten muss auf die Mantissen angewendet werden.',
      shift: 'Shift',
      considerRepresentation: 'Darstellung beachten',
      consider1comma: 'Die Mantisse beginnt in der Standard-Darstellung immer mit einer 1 vor dem Komma.',
    },
    en: {
      numVarInput: 'Number of variables',
      confirm: 'Confirm',
      varNaming: 'Variable naming',
      kvDiagram: 'Karnaugh Map',
      numeralSystem: 'Numeral System',
      polyadic: 'Polyadic',
      floatingPoint: 'Floating Points',
      functionMin: 'Minimization',
      exercises: 'Exercises',
      generateEx: 'Generate Exercise',
      generate: 'Generate',
      addition: 'Addition',
      subtraction: 'Subtraction',
      multiplication: 'Multiplication',
      division: 'Division',
      solution: 'Solution',
      ownSolution: 'Own Solution',
      signBit: 'Sign Bit',
      correctSolution: 'Correct Solution',
      exponentBits: 'Exponent',
      fractionBits: 'Fraction',
      attRound: 'Do not forget to round!',
      attSolve: 'Please try to solve the exercise beforehand!',
      step: 'Step',
      freeCalculation: 'Free Calculation',
      operationSelect: 'Configure Computation',
      firstFloatingPoint: 'First Floating Point Number',
      secondFloatingPoint: 'Second Floating Point Number',
      operand: 'Operand',
      decimal: 'Decimal',
      binary: 'Binary',
      inputNumber: 'Input Number',
      fpformat: 'Floating Point Format',
      check: 'Check',
      values: 'Values',
    },
    fr: {
      numVarInput: 'Nombre de Variables',
      confirm: 'Confirmer',
      varNaming: 'Nommage des Variables',
      kvDiagram: 'Table de Karnaugh',
      numeralSystem: 'Système de numération',
      polyadic: 'Polyadique',
      floatingPoint: 'Virgule flottante',
      functionMin: 'Minimisation',
      exercises: 'Exercises',
      generateEx: 'Générer l\'exercice',
      generate: 'Générer',
      addition: 'Addition',
      subtraction: 'Soustraction',
      multiplication: 'Multiplication',
      division: 'Division',
      solution: 'Solution',
      ownSolution: 'Propre Solution',
      signBit: 'Signe',
      correctSolution: 'Solution Correcte',
      exponentBits: 'Exposant',
      fractionBits: 'Mantisse',
      attRound: 'N\'oubliez pas d\'arrondir!',
      attSolve: 'Veuillez essayer de résoudre l\'exercice au préalable!',
      step: 'Étape',
      freeCalculation: 'Calcul libre',
      operationSelect: 'Configurer le calcul',
      firstFloatingPoint: 'Premier numéro à virgule flottante',
      secondFloatingPoint: 'Deuxième numéro à virgule flottante',
      operand: 'Operand',
      decimal: 'Décimale',
      binary: 'Binaire',
      inputNumber: 'Entrez le numéro',
      fpformat: 'Format en virgule flottante',
      check: 'Vérifier',
      values: 'Valeurs',
    },
    es: {
      numVarInput: 'Número de Variables',
      confirm: 'Confirmar',
      varNaming: 'Nombramiento variable',
      kvDiagram: 'Mapa de Karnaugh',
      numeralSystem: 'Sistema de numeración',
      polyadic: 'Poliádico',
      floatingPoint: 'Coma Flotante',
      functionMin: 'Minimización',
      exercises: 'Ejercicios',
      generateEx: 'Generar Ejercicio',
      generate: 'Generar',
      addition: 'Adición',
      subtraction: 'Sustracción',
      multiplication: 'Multiplicación',
      division: 'División',
      solution: 'Solución',
      ownSolution: 'Solución propia',
      signBit: 'Bit de signo',
      correctSolution: 'Solución Correcta',
      exponentBits: 'Exponente',
      fractionBits: 'Significando',
      attRound: '¡No te olvides de redondear!',
      attSolve: '¡Por favor, intente resolver el ejercicio de antemano!',
      step: 'Paso',
      freeCalculation: 'Cálculo libre',
      operationSelect: 'Configurar la computación',
      firstFloatingPoint: 'Primer número de punto flotante',
      secondFloatingPoint: 'Segundo número de punto flotante',
      operand: 'Operand',
      decimal: 'Decimal',
      binary: 'Binario',
      inputNumber: 'Introduce el número',
      fpformat: 'Formato de punto flotante',
      check: 'Comprobar',
      values: 'valore',
    },
    lt: {
      numVarInput: 'Numerus variabilium',
      confirm: 'Adfirmare',
      varNaming: 'Nomen variabilium',
      kvDiagram: 'Tabula Karnaugh',
      numeralSystem: 'Disciplina numerorum',
      polyadic: 'Polyadicus',
      floatingPoint: 'Comma adfluens',
      functionMin: 'Deminutio',
      exercises: 'Exercitia',
      generateEx: 'Crea exercitium',
      generate: 'Crea',
      addition: 'Addere',
      subtraction: 'Deducere',
      multiplication: 'Multiplicare',
      division: 'divido',
      solution: 'Solutio',
      ownSolution: 'Solutio propia',
      signBit: 'Signum',
      correctSolution: 'Solutio recta',
      exponentBits: 'Exponens',
      fractionBits: 'Fractura',
      attRound: 'Habet enim praeteriti doloris secura recordatio delectationem.!',
      attSolve: 'Iucundi acti labores!',
      step: 'Gradus',
      freeCalculation: 'Ratio libera',
      operationSelect: 'Elige rationem',
      firstFloatingPoint: '1. Comma adfluens',
      secondFloatingPoint: '2. Comma adfluens',
      operand: 'Operandus',
      decimal: 'Systema decima',
      binary: 'Systema binaria',
      inputNumber: 'Inputa numerum',
      fpformat: 'Forma commae adfluentis',
      check: 'Authentica',
      values: 'valōrēs',
    },
  },
});
