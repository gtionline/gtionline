{
  "numVarInput": "Numerus variabilium",
  "confirm": "Adfirmare",
  "varNaming": "Nomen variabilium",
  "kvDiagram": "Tabula Karnaugh",
  "numeralSystem": "Disciplina numerorum",
  "polyadic": "Polyadicus",
  "floatingPoint": "Comma adfluens",
  "functionMin": "Deminutio",
  "exercises": "Exercitia",
  "generateEx": "Crea exercitium",
  "generate": "Crea",
  "addition": "Addere",
  "subtraction": "Deducere",
  "multiplication": "Multiplicare",
  "division": "divido",
  "solution": "Solutio",
  "ownSolution": "Solutio propia",
  "signBit": "Signum",
  "correctSolution": "Solutio",
  "exponentBits": "Exponens",
  "fractionBits": "Fractura",
  "attRound": "Habet enim praeteriti doloris secura recordatio delectationem.!",
  "attSolve": "Iucundi acti labores!",
  "step": "Gradus",
  "freeCalculation": "Ratio libera",
  "operationSelect": "Elige rationem",
  "firstFloatingPoint": "1. Comma adfluens",
  "secondFloatingPoint": "2. Comma adfluens",
  "operand": "Operandus",
  "decimal": "Systema decima",
  "binary": "Systema binaria",
  "input": "Inputa",
  "inputNumber": "Inputa numerum",
  "fpformat": "Forma commae adfluentis",
  "check": "Authentica",
  "values": "valōrēs",
  "arithmetic": "Arithmetic",
  "conversion": "Conversion",
  "conversionExercise1": "Convert: ",
  "conversionExercise2": "into a IEEE-Floatingpointnumber with exponent lenght of: ",
  "steps": "steps",
  "repeatMinuend": "repeat\\ minuend",
  "doDivision": "execute division",
  "doMultiplication": "execute multiplication",
  "getDescription": "Print",
  "approach": "Approach",
  "gti": "Foundations of Computer Engineering",
  "disclaimer": "Disclaimer:<br>This is an automatically generated solution approach by the GTI-Online-Website. Every output is completely <u>unofficial</u> and in the drafts state.<br>We are making lots of efforts to build a correct and reliable tool for you. Regardless, there may be failures in the solution or approach; in particular with certain browsers. Please review the solution before using it; for instance, in an exam.",
  "example": "Example",
  "composition": "composition",
  "negativeSummand": "An addition with a negative value is similar to a subtraction.",
  "negativeSubtrahend": "A negative subtrahend is similar to a positive summand.",
  "negativeMinuendSubtrahend": "Simplification for the case \\( - x - y \\rightarrow - (x + y) \\)",
  "addWithZero": "An addition with 0 results in the other summand",
  "subWithZero": "A subtraction with 0 results in the other value",
  "mulWithZero": "A multiplication with 0 results always 0.",
  "divWithZero": "A division with 0 in the numerator results always 0.",
  "zeroDivision": "A division by 0 is illegal!",
  "arithmeticFree": "Free arithmetic",
  "conversionFree": "Free conversion",
  "value": "Value",
  "givenValues": "values of the transmitted numbers",
  "leftValue": "left value",
  "rightValue": "right value",
  "firstSummand": "1. summand",
  "secondSummand": "2. summand",
  "firstFactor": "1. factor",
  "secondFactor": "2. factor",
  "minuend": "minuend",
  "subtrahend": "subtrahend",
  "numerator": "numerator",
  "denominator": "denominator",
  "sign": "sign",
  "exponent": "exponent",
  "adjustExponents": "The exponents of both numbers must be balanced.",
  "addExponents": "The exponents of both numbers must be added.",
  "subtExponents": "The exponents of both numbers must be subtracted.",
  "diffExponent": "difference of the exponents",
  "smallerExponent": "The smaller exponent will substracted from the bigger one.",
  "resDiffExponent": "Hence this difference results",
  "newExponent": "new exponent",
  "considerExponent": "consider the exponent",
  "mantissa": "mantissa",
  "mulMantissa": "The mantissa of both numbers must be multiplied.",
  "solutionIsNan": "The mantissa can not be calculated because the input leads to NaN.",
  "solutionIsInf": "The mantissa can not be calculated because the input leads to infinity.",
  "solutionIsZero": "The mantissa can not be calculated because the input leads to zero.",
  "addMantissa": "The mantissa of both numbers must be added.",
  "divMantissa": "The mantissa of both numbers must be divided.",
  "newMantissa": "new mantissa",
  "zeroMantissa": "both mantissa are equal \\( \\rightarrow \\) the new mantissa is the 0-mantissa",
  "newMantissaIs": "Hence the new mantissa is",
  "equalMantissa": "Both mantissa are equal \\( \\rightarrow \\) the exponent will be incremented the mantissa remains",
  "equalMantissaDiv": "Both mantissa are equal, no binary division will be executed",
  "adjustSmallerMantissa": "Adjust the smaller mantissa",
  "shiftMantissa": "Shift the smaller mantissa",
  "mantissaFloat": "Mantissa inside the float",
  "mantissa1float": "The leading 1 is not part of the float",
  "subtTwosComplement": "Subtraction is similar to addition with the two's complement",
  "mantissaTwosComplement": "Formation of the two's complement out of the mantissa",
  "switchBits": "invert bits",
  "add1": "add 1",
  "normalize": "normalize",
  "shiftExpMant": "The exponent's shift factor must be applied to the mantissa.",
  "shift": "shift",
  "considerRepresentation": "consider representation",
  "consider1comma": "The mantissa begins with an 1 in the standard form.",
  "ternary": "ternary",
  "quaternary": "quaternary",
  "quinary": "quinary",
  "senary": "senary",
  "septenary": "septenary",
  "octal": "octal",
  "novenary": "novenary",
  "hexadecimal": "hexadecimal",
  "hex": "hexadecimal",
  "number": "number",
  "representation": "representation in original format",
  "firstFormat": "Initial format",
  "secondFormat": "Target format",
  "doConversion": "Convert:",
  "modus": "modus",
  "to": "to",
  "TenToPower": "The conversion from the decimal system to an arbitrary one goes in two steps. Before the comma, the digits were converted with the use of the division algorithm. After the comma, the multiplication algorithm will be applied.",
  "PowerToTen": "An arbitrary number system can be converted to the decimal system by summarizing all potentiated digits.",
  "PowerToPower": "We convert an arbitrary number system into another within two steps via the decimal system. At first, the original number will be transferred into the decimal system be summarizing the potentiated digits. In the second step, we use the division- and multiplication algorithm to create the resulting number.",
  "noValuesBeforeComma": "There are no values in front of the comma. Therefore, the division algorithm can be skipped.",
  "noValuesAfterComma": "There are no values after the comma. Therefore, the multiplication algorithm can be skipped.",
  "firstToTen": "1. Summation of the potentiated digits",
  "secondToPower": "2. Conversion via division- and multiplication algorithm",
  "shortcutBinToHex": "At the conversion from binary to hexadecimal, the values can be read directly.",
  "shortcutHexToBin": "At the conversion from hexadecimal to binary, the values can be read directly.",
  "divisionAlgorithm": "Division algorithm",
  "multiplicationAlgorithm": "Multiplication algorithm",
  "summation": "Summation",
  "factor": "factor",
  "quotient": "quotient",
  "remainder": "remainder",
  "newBasis": "new basis",
  "calcStep": "calculation\\ step",
  "summands": "summands",
  "polyadicExercise1": "Convert the value:",
  "polyadicExercise2": "from the initial format: ",
  "polyadicExercise3": "to the target format:",
  "and": " et",
  "Danksagung": "Gratias"
}
