{
  "complementExample": "补充",
  "shiftZero": "移位后为零",
  "doubleNegative": "负数",
  "denormalized": "去正规化",
  "fpExerciseIntro": "使用生成的练习在IEEE-754格式的浮点数之间练习算术",
  "fpFormatSelectionSimple": "要选择一个自定义格式，指定指数和尾数之间的比特分布",
  "fpFormatSelection": "要选择一个自定义格式，首先选择浮点数的位数，然后指定指数和尾数之间的位数分布",
  "fpArithIntro": "按照IEEE-754的格式或基于它的自定格式练习浮点数之间的算术,",
  "fpConvIntro": "根据IEEE-754或基于它的自定格式，使用生成的练习题，练习十进制系统和浮点数格式之间的转换",
  "polyConvIntro": "练习你可以自由选择的位置数字系统之间的转换,",
  "polyConvGenIntro": "通过解决生成的练习题来练习位置数字系统之间的转换,",
  "polyadicMultiplicationDescription": "小数点后的数字是通过从上到下阅读余数的数字得到的,",
  "polyadicDivisionDescription": "小数点之前的数字通过从下到上读取余数的数字得出,",
  "enter_cmos": "请输入你的CMOS公式,",
  "sequentialCircuit": "由两个D-flip-flops和多路复用器组成的顺序电路的例子,",
  "homePageText": "GTI-Online的目标是加深在讲座和相应练习中所学的选定主题的知识,在菜单中选择一个主题并开始练习,",
  "startTraining": "我们走吧",
  "numVarInput": "变量的数量",
  "fpExerciseText": "让 \\( fp_1 \\) 和 \\( fp_2 \\) 作为16位浮点格式的浮点数,计算%{op1}的 \\( fp_1 %{op2} fp_2 \\) 而不离开二进制表示，并再次指定为浮点数：",
  "confirm": "确认",
  "varNaming": "变量命名",
  "kvDiagram": "Karnaugh Map",
  "numeralSystem": "数字系统",
  "polyadic": "位置性数字系统",
  "floatingPoint": "浮动点",
  "functionMin": "最小化",
  "exercises": "练习",
  "generateEx": "生成练习",
  "generate": "生成",
  "polyFreeIntro": "用你自己的数值在你想要的系统中练习位置数字算术",
  "addition": "加法",
  "subtraction": "减法",
  "multiplication": "乘法",
  "division": "除法",
  "solution": "解决方案",
  "ownSolution": "自己的解决方案",
  "signBit": "签名位",
  "load": "加载",
  "correctSolution": "解决方案",
  "exponentBits": "指数",
  "fractionBits": "分数",
  "attRound": "不要忘记四舍五入！",
  "attSolve": "请事先尝试解决这个练习！",
  "step": "步骤",
  "freeCalculation": "免费计算",
  "operationSelect": "配置计算",
  "firstFloatingPoint": "第一个浮点数字",
  "secondFloatingPoint": "第二个浮点数字",
  "operand": "操作数",
  "decimal": "十进制",
  "binary": "二进制",
  "inputNumber": "输入数",
  "fpformat": "浮点格式",
  "check": "检查",
  "values": "数值",
  "arithmetic": "算术",
  "conversion": "转换",
  "conversionExercise": "转换的练习",
  "conversionExercise1": "转换,",
  "conversionExercise2": "转换成一个IEEE浮点数，指数长度为",
  "steps": "步骤",
  "repeatMinuend": "重复\\ 闽南语",
  "doDivision": "执行除法",
  "doMultiplication": "执行乘法",
  "getDescription": "打印",
  "approach": "办法",
  "gti": "计算机工程基础",
  "disclaimer": "免责声明:<br>这是一个由网站自动生成的解决方案方法。 每个输出都是完全非官方的，处于草稿状态。我们正在努力为您建立一个正确和可靠的工具。 不管怎么说，在解决方案或方法上可能会有失误,这尤其取决于你的浏览器版本,在考试中使用它之前，请先审查一下,",
  "example": "例子",
  "composition": "组成",
  "negativeSummand": "带负值的加法类似于减法",
  "negativeSubtrahend": "负数的下弦与正数的上弦相似,",
  "negativeMinuendSubtrahend": "简化的情况是 \\(- x - y \\rightarrow - (x + y) \\)",
  "addWithZero": "用0做加法的结果是另一个和值",
  "subWithZero": "用0做减法，结果是另一个值",
  "mulWithZero": "带0的乘法的结果总是0",
  "zeroDivision": "除以0是非法的！",
  "arithmeticFree": "自由算术",
  "conversionFree": "免费转换",
  "value": "价值",
  "givenValues": "传送数字的值",
  "leftValue": "左边的值",
  "rightValue": "右边的值",
  "firstSummand": "1. summand",
  "secondSummand": "2. summand",
  "firstFactor": "1.因素",
  "secondFactor": "2.因素",
  "minuend": "闽南语",
  "subtrahend": "剩余部分",
  "numerator": "分子",
  "denominator": "分母",
  "sign": "符号",
  "exponent": "指数",
  "adjustExponents": "两个数字的指数必须是平衡的,",
  "addExponents": "两个数字的指数必须相加",
  "subtExponents": "两个数字的指数必须被减去,",
  "diffExponent": "指数之差",
  "smallerExponent": "较小的指数将从较大的指数中减去",
  "resDiffExponent": "因此，这个差值是",
  "newExponent": "新的指数",
  "considerExponent": "考虑指数",
  "mantissa": "尾数",
  "mulMantissa": "两个数字的尾数必须相乘",
  "solutionIsNan": "不能计算尾数，因为输入的结果是NaN",
  "solutionIsInf": "不能计算尾数，因为输入的结果是无穷大,",
  "solutionIsZero": "不能计算尾数，因为输入的结果是零,",
  "addMantissa": "两个数字的尾数必须相加,",
  "divMantissa": "两个数字的尾数必须被除掉,",
  "newMantissa": "新的尾数",
  "zeroMantissa": "两个尾数相等 \\( \\rightarrow \\) 新的尾数是0尾数",
  "newMantissaIs": "因此，新的尾数是",
  "equalMantissa": "两个尾数都相等 \\( \\rightarrow \\) 指数将被递增，尾数保持不变",
  "equalMantissaDiv": "两个尾数都相等，不会执行二进制除法",
  "adjustSmallerMantissa": "调整尾数",
  "shiftMantissa": "移动尾数",
  "mantissaFloat": "浮点数内的尾数",
  "mantissa1float": "前导数字不是浮点数的一部分",
  "subtTwosComplement": "减法与加法类似，都是用二的补数",
  "mantissaTwosComplement": "从尾数中形成二的补数",
  "switchBits": "反转比特",
  "add1": "加1",
  "normalize": "正常化",
  "shiftExpMant": "指数的移位系数必须应用于尾数",
  "shift": "移位",
  "considerRepresentation": "考虑表示法",
  "consider1comma": "尾数在标准形式下以1开始",
  "ternary": "三元系统",
  "quaternary": "四进制系统",
  "quinary": "二元系统",
  "senary": "二元系统",
  "septenary": "九宫格系统",
  "octal": "八进制系统",
  "novenary": "Nonal系统",
  "hexadecimal": "十六进制系统",
  "十六进制": "十六进制",
  "输入": "输入",
  "数字": "数字",
  "代表": "原始格式的表述",
  "初始格式": "初始格式",
  "secondFormat": "目标格式",
  "doConversion": "转换：",
  "modus": "模式",
  "to": "到",
  "TenToPower": "从十进制系统到任意系统的转换分两步进行,在逗号之前，数字的转换是使用除法算法的,逗号之后，将采用乘法算法,",
  "PowerToTen": "一个任意的数字系统可以通过总结所有电位的数字转换为十进制系统,",
  "PowerToPower": "我们在两个步骤内通过十进制系统将一个任意的数字系统转换为另一个系统,首先，原始数字将被转移到十进制系统中，并总结出有效的数字,在第二步中，我们使用除法和乘法的算法来创造出结果的数字",
  "noValuesBeforeComma": "逗号前面没有数值,因此，可以跳过除法算法,",
  "noValuesAfterComma": "逗号后面没有值,因此，可以跳过乘法算法,",
  "firstToTen": "1.增效数字的总和",
  "secondToPower": "2.通过除法-和乘法算法进行转换",
  "shortcutBinToHex": "在从二进制到十六进制的转换中，可以直接读取数值",
  "shortcutHexToBin": "在从十六进制到二进制的转换中，可以直接读取数值,",
  "divisionAlgorithm": "除法算法",
  "multiplicationAlgorithm": "乘法算法",
  "summation": "求和",
  "factor": "因数",
  "quotient": "商数",
  "remainder": "余数",
  "newBasis": "Base_{'{new}'}",
  "calcStep": "计算/步骤",
  "summands": "Summands",
  "newMantissaSignBit": "因为是补数，所以我们用符号位来计算：",
  "disclaimerFooter": "不保证本网站所提供材料的正确性,",
  "polyadicExercise1": "转换 中的值",
  "polyadicExercise2": "从初始格式",
  "polyadicExercise3": "转换为目标格式",
  "exerciseArchive": "练习档案",
  "randomExercise": "随机练习",
  "doCalculation": "计算",
  "colorCoding": "颜色编码",
  "mathDistribution": "分布",
  "easy": "简单",
  "difficultyMiddle": "中等",
  "difficultyHard": "难",
  "sheet": "床单",
  "goal": "目标",
  "difficultyUC": "难度",
  "bf_infotext_or_interact_with_kv": "或直接与KV-Diagram互动",
  "bf_infotext_kv_must_not_be_empty": "KV-Diagram必须包含1和0",
  "bf_infotest_click_on_hidden_areas_to_make_visible": "点击隐藏的区域使其显现",
  "bf_normal_forms": "正常形式",
  "bf_disjunctiveNormalForm": "不连贯的正常形式",
  "bf_conjunctiveNormalForm": "共轭正常形式",
  "bf_disjunctiveMinimalForm": "不连贯的最小形式",
  "bf_conjunctiveMinimalForm": "共轭最小形式",
  "bf_quineMCCluskeyClasses": "Quine MC Cluskey类",
  "bf_primeTerms": "素数词",
  "bf_primeImplicants": "质数内含物",
  "bf_primeImplicates": "质数内含物",
  "bf_primeCoverTable": "主蕴涵体图表/'覆盖表'",
  "bf_petrickExpression": "Petrick的方法",
  "bf_minimalForms": "最小的形式",
  "bf_tableWithCyclicRest": "具有循环休息功能的表",
  "bf_einstelle": "一个",
  "bf_nullstelle": "零",
  "bf_einstellen": "Ones",
  "bf_nullstellen": "零",
  "bf_goal_determine_DNF": "确定DNF",
  "bf_goal_determine_KNF": "确定KNF",
  "bf_goal_determine_prime_implicants": "确定质数内含物",
  "bf_goal_determine_prime_implicates": "确定质数内含物",
  "bf_covertable_step_description_initial": "<h4>初始步骤:</h4>在表格的列中输入所有基本术语，在行中输入所有内含物。 如果一个隐含语涵盖了{ifMinTermsEinstelleElseNullstelle}，则用X标记该单元。越多，在硬件上的实现就越复杂（即成本高）。<br>技巧:<br>如果内含物的所有字词也以同样的方式出现在基词中，那么质数内含物就完全覆盖了 (一)。",
  "bf_covertable_step_description_core_found": "<h4>发现的核心:</h4>唯一涵盖列{columnName}的内含子是术语{rowName}。因此，这个内含子肯定会出现在我们的结果函数中。将该行标记为 (核心)，并将该列删除。",
  "bf_covertable_step_description_cross_column_bc_covered": "<h4>已经涵盖的栏目:</h4> 列{columnName}已经被内含的{rowName}所覆盖。剔除该列。",
  "bf_covertable_step_description_cross_row_bc_covered": "<h4>行已被覆盖：</h4>{rowName}行的所有X已经被覆盖,划掉该行,",
  "bf_covertable_step_description_row_domination": "<h4>行的主导地位:</h4>行{dominatorName}支配行{dominatedName}；即行{dominatorName}有标记的地方，行{dominatedName}也有（而且可能更多！）。 =>交叉支配行{dominatedName}。 <br>请注意，行的支配地位只适用于，因为行{dominatorName}的成本低于，或与{dominatedName}相同；或因为没有其他行能覆盖{dominatorName}的额外标记，并且成本低于{dominatorName}-{dominatedName}。",
  "bf_covertable_step_description_column_domination": "<h4>柱状物的优势:</h4>列{dominatorName}支配列{dominatedName}；即列{dominatorName}有标记的地方，列{dominatedName}也有（而且可能更多！）。 =>跨越支配列{dominatorName}。<br>与行优势不同，列优势根本不需要你考虑成本。",
  "bf_covertable_step_description_cyclic_rest": "<h4>素数表算法的任何规则都不适用,这被称为'循环休止符'（ger: 'Zyklischer Rest'）,通过为休止符表设置佩特里克表达式（ger: Petrick Ausdruck），人们仍然能够确定原始函数的最小形式,",
  "bf_infoblob_random_exercise_selection": "难度说明布尔函数应该产生多少个某种类型的单项（如最小项、素数内含物）,",
  "bf_infoblob_petrick_statement": "该算法包括两个阶段：<ol><li>通过排序使相互吸收的术语容易被看到（只在有影响的情况下显示）,</li><li>将前两项相互相乘，直到剩下典型的和,</li></ol>",
  "bf_distributionUC": "分布",
  "bf_idempotenceUC": "异能性",
  "bf_absorptionUC": "吸收",
  "bf_sortingUC": "排序",
  "bf_infoblob_functionMin": "在这个页面上，你可以找到最小化布尔表达式的不同程序," ,
  "bf_disjunctiveNormalForm_explanation": "disjunctive normal form是一个函数的所有minterm（1）的disjunction（使用或运算符的条款组合）,每个minterm都精确地对应于函数中的1，所有字词都必须发生否定或不否定,",
  "bf_conjunctiveNormalForm_explanation": "共轭正常形式是一个函数的所有maxterms（0s）的连接（使用和运算符的组合）,0在maxterms中不是被选择的（像minterms中的1一样），而是被排除的,每个maxterm完全对应于函数中的一个0，所有的字词都必须发生否定或不否定," ,
  "bf_quineMCCluskeyClasses_explanation": "Quine/McCluskey算法是一种最小化算法，用它可以确定一个函数的内含物,",
  "bf_infoblob_quineMCCluskeyClasses_colorCoding": "在Quine/McCluskey算法中，还原中使用的所有术语通常都被划掉了,如果颜色编码被激活，它们将以浅灰色显示代替,",
  "bf_infoblob_quineMCCluskeyClasses_01": "通常情况下，我们将最小或最大项写入各个类中,另外，我们也可以用0（用于否定字词）和1（用于非否定字词）来工作，据此，这些字词的位置决定了它是哪个字词," ,
  "bf_primeTerms_explanation": "具有最少字数的条款，只包括1或0",
  "bf_bf_primeImplicants_explanation": "素数隐含物是只涵盖一的术语（有不关心的）,",
  "bf_primeImplicates_explanation": "质数内含物是只涵盖零的术语（不关心）,",
  "bf_disjunctiveMinimalForm_explanation": "由连接词组成的二连体，不能进一步简化（不违反此形式）（简化DNF）",
  "bf_conjunctiveMinimalForm_explanation": "由分离连接的字词的连接，不能进一步简化（不违反此形式）（简化的KNF）",
  "cmos_infoblob_description": "CMOS是由互补的NMOS网络（下拉网络，因为连接到地）和PMOS网络（上拉网络，因为连接到电源电压）组成的,因此，在固定的开关状态下消耗的能量较少，因为PDN和PUN是互补的，因此在开关期间只在短时间内同时传导,然而，芯片上需要更多的面积," ,
  "cmos_infoblob_input_description": "注意：对于OR门可以使用'+'，对于AND门可以使用'*'，对于负数可以使用'~',变量可以有任意的名字（注意：'ab'被认为是一个变量，而不是'a'乘以'b'）",
  "contactPersonHeader": "联系人",
  "herausgeber": "出版商",
  "divWithZero": "对于分子为0的除法，其结果总是0",
  "impressum": "版本说明",
  "representedByHeader": "代表人是",
  "copyright": "联邦大学计算机科学12系主任,保留所有权利,",
  "representedBy": "计算机科学系12教席是弗里德里希-亚历山大-纽伦堡大学（FAU）内的一个公共法律机构,根据Art. 20, 21 BayHSchG，FAU作为一个国家机构和公法下的自治机构，由校长对外代表,",
  "haftungsauschlussHeader": "免责声明",
  "mantissaComplement": "尾数是负数,所以我们必须形成补数并设置符号位,",
  "mantissaNormalize": "为了使尾数以前导1开始，我们需要通过应用{shift}的移位来规范化尾数,我们还必须将这个移位应用于指数，从而得到新的指数{exponent}",
  "mantissaNormalizeDenorm": "结果不能用移位{shift}的归一化表示，所以我们用指数{exponent}的归一化表示,",
  "newExponentDivision": "新的指数结果为 \\ E_{'{neu}'} = E_1 - E_2 + BIAS = %{E1} - %{E2} + %{Bias} = %{Result} \\）",
  "newExponentMultiplication": "新指数的结果为：\\( E_{'{neu}'} = E_1 + E_2 - BIAS = %{E1}) + %{E2}- %{Bias} = %{Result}\\, (%{ExpBits}) \\)" ,
  "haftungsauschlussBody": "各机构对其他网站的内容负责,本网站提供的所有信息都是根据我们的知识和信念汇编和检查的,然而，我们不能保证所提供的信息是最新的、正确的、完整的或在任何时候都可以得到的,与互联网报价的用户之间不存在合同关系,我们不对因使用该互联网报价而造成的任何损失负责,如果《德国民法典》第839条的规定（违反官方职责的责任）与此相关，则该免责条款不适用,对于因恶意软件或在调用或下载数据时安装或使用软件而造成的任何损害，我们不承担责任,作为服务提供者，根据一般法律中的§ 7 para.1 TMG，我们对自己在这些网页上的内容负责,根据§8至10 TMG，我们没有义务监测传输或存储的信息或调查表明有非法活动的情况,根据一般法律，删除或阻止使用信息的义务仍然不受影响,然而，这方面的责任只有在具体的违法行为被知道时才有可能,如果我们意识到任何此类侵权行为，我们将立即删除相关内容,经营者明确保留更改、补充或删除个别网页、网络服务或整个报价的权利，而无需单独宣布，或暂时或永久停止发布",
  "systemInBase":"基地的系统",
  "basis": "基地",
  "minterms": "最小条款",
  "maxterms": "马克斯特姆",
  "contact": "联系",
  "impressumText": "该印记可以在以下地方找到,",
  "and": "和",
  "weThank": "我们要感谢以下人士在创建本网站时提供的帮助：",
  "Danksagung": "致谢",
  "thankProfessorTeich": "本网页上的材料是基于弗里德里希-亚历山大大学（FAU）的Jürgen Teich教授（Dr.-Ing）所做的GTI讲座,我们感谢他的专业知识和赞助,",
  "wintersemester": "冬季学期",
  "sommersemester": "夏季学期",
  "downloadSvg": "导出为SVG",
  "downloadPng": "导出为PNG",
  "formula": "公式",
  "divByZero": "除以0是NaN,",
  "falseFormat": "错误的格式！"
}
